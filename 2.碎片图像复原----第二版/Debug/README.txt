项目介绍:
    本项目主要分为 Main, Package, Test 三个模块
    Main: 主模块
        MainUI.py 为UI界面版的主程序，集成了包模块的所有功能
        包括下载，切分，复原，生成数据集，测试数据集等功能，并通过一个UI交互界面展示
    Package: 包模块
        Config.py 用于配置文件路径以及算法参数
        LoadFigure.py 用于下载数据图像
        SplitFigure.py 用于随机切分图像
        RecoverFigure.py 用于复原碎片图像
        RecoverFigs.exe  用 C++ 编译的一个可执行文件，用于匹配拼接图片，是程序的核心模块
        opencv_world410.dll  opencv 的动态链接库，依赖环境所必须的
        本模块主要为 Main 主模块提供相关功能的调用
    Test: 测试模块
        CreateFigures.py 用于产生图像数据集
        ComputeAccuracy 通过测试集计算算法准确率
        Test.py 对包模块中关键函数功能的测试
        本模块确保包模块代码的正确性，并未Main模块开发提供借鉴


功能介绍:
    1. 从本地选择图片或者中网上爬取图片，并随机均匀切分成M行N列的小矩形碎片，总共M*N张。
        碎片文件以png格式保存在 Data/SplitFigures/Sample 下, 其中 cat.jpg 为原图像
    2. 通过算法将碎片图像复原，复原后的新图像保存至 Data/RecoverFigures/sample.jpg
    3. 批量从网上下载数据集，对每一个数据集生成一堆碎片，然后再还原这些碎片得到新图片，
    	统计这些还原后图片的效果，作为衡量程序健壮性的指标


算法介绍
	1. 图像预处理，包含高斯滤波，Canny 算子提取边缘，再通过形态学膨胀和腐蚀操作转化为二值图像，
		然后用 opencv 提取二值图像的边缘轮廓， 最后用多边形拟合近似，得到一系列的轮廓点
	2. 多边形轮廓进行匹配，这里用到了多边形的内角匹配合形状匹配以及灰度值匹配，我们成功运用了
		最大公共子窜的模型用于多边形轮廓匹配，同时改进了基于动态规划的最大公共自窜算法，借助多个
		参数阈值，使得俩俩轮廓匹配的算法准确率大大提高，最后成功构建了一个匹配器，只要输入二个原图像
		改匹配器会计算出最佳的匹配位置，同时放回一个匹配系数，为后续拼接做铺垫
	3. 对每二个图像依次进行俩俩匹配，保存对应的匹配系数和最佳匹配位置，然后可以得到一张无向图，
		图中的每个顶点代表一副图像的轮廓信息， 连接顶点的边代表二副碎片图像的匹配系数，最后从该图中
		生成一个匹配系数总和最大的一颗树（其实就是最小生成树算法），我们用 C++ 优先队列和 BFS 实现，
		，再记录这颗树种的每一条边。
	4. 遍历每一条边，根据之前记录的轮廓匹配位置，依次对该边对应的二个顶点即碎片图像进行拼接，
		最后就可以得到完整的拼接后的图像


    分析可知，该算法的核心是： 基于动态规划的最大自窜模型和基于优先队列+BFS的最小生成树算法，
    		拼接得到的结构是唯一的，因为最小生成树是唯一的，拼接的最终效果取决于俩俩匹配器算法
    		的效果，而匹配器的效果可以通过调节一些超参来改进


作者介绍:
    笔名： PyJun
    邮箱： py.jun@qq.com
